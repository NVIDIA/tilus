#!/bin/bash

# Exit script on first error
set -e

# Define color codes with bold formatting
BOLD_GREEN='\033[1;32m'
BOLD_YELLOW='\033[1;33m'
NC='\033[0m' # No color/reset

# Get the directory of the script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Define the target directory (relative to script location)
TARGET_DIR=$(realpath "$SCRIPT_DIR/../../python")

# Ensure the target directory exists
if [ ! -d "$TARGET_DIR" ]; then
    echo -e "${BOLD_YELLOW}Warning: Target directory '$TARGET_DIR' does not exist.${NC}"
    exit 0
fi

# Get the list of staged Python files within TARGET_DIR
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^$(realpath --relative-to="$(git rev-parse --show-toplevel)" "$TARGET_DIR")" | grep '\.py$' || true)

# Exit if no Python files are staged
if [ -z "$STAGED_FILES" ]; then
    echo -e "${BOLD_GREEN}âœ” No Python files staged for commit. Skipping formatting and linting.${NC}"
    exit 0
fi

echo "Checking the following staged Python files:"
echo "$STAGED_FILES" | sed 's/^/\t/'

# Run Ruff formatter only on the staged Python files
# echo "Running Ruff formatter..."
echo "$STAGED_FILES" | xargs ruff format

# Check if formatting made any changes
if ! git diff --quiet -- $STAGED_FILES; then
    # echo "Formatting changes detected. Staging updated files..."
    git add $STAGED_FILES
fi

# Run Ruff for linting (non-blocking)
echo "Running ruff linting..."
if ! echo "$STAGED_FILES" | xargs ruff check; then
    echo -e "${BOLD_YELLOW}ruff found linting issues, but the commit will proceed.${NC}"
fi

# Run Mypy for type checking (non-blocking)
echo "Running mypy type checking..."
if ! echo "$STAGED_FILES" | xargs mypy; then
    echo -e "${BOLD_YELLOW}mypy found type checking issues, but the commit will proceed.${NC}"
fi

echo -e "${BOLD_GREEN}Pre-commit checks completed successfully. Proceeding with commit.${NC}"
